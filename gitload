#!/bin/bash

# GITLOAD - Simple GitHub Upload Tool
# Automatically creates GitHub repository and uploads your project

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show usage
show_usage() {
    echo "GITLOAD - Simple GitHub Upload Tool"
    echo ""
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -n, --name NAME        Repository name (required)"
    echo "  -d, --description DESC Repository description"
    echo "  -p, --private          Make repository private (default: public)"
    echo "  -r, --readme           Add README.md"
    echo "  -l, --license          Add MIT License"
    echo "  -h, --help             Show this help"
    echo ""
    echo "Examples:"
    echo "  $0 -n my-awesome-tool -d \"My awesome CLI tool\""
    echo "  $0 -n secret-project -p -d \"Private project\""
    echo "  $0 -n quick-script -r -l"
}

# Default values
REPO_NAME=""
REPO_DESC=""
IS_PRIVATE=false
ADD_README=false
ADD_LICENSE=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -n|--name)
            REPO_NAME="$2"
            shift 2
            ;;
        -d|--description)
            REPO_DESC="$2"
            shift 2
            ;;
        -p|--private)
            IS_PRIVATE=true
            shift
            ;;
        -r|--readme)
            ADD_README=true
            shift
            ;;
        -l|--license)
            ADD_LICENSE=true
            shift
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Check if repository name is provided
if [[ -z "$REPO_NAME" ]]; then
    print_error "Repository name is required!"
    show_usage
    exit 1
fi

# Check if we're in a git repository
if [[ ! -d ".git" ]]; then
    print_status "Initializing git repository..."
    git init
    print_success "Git repository initialized"
fi

# Check if GitHub CLI is installed
if ! command -v gh &> /dev/null; then
    print_error "GitHub CLI (gh) is not installed!"
    print_status "Install it with: sudo apt install gh"
    exit 1
fi

# Check if user is authenticated with GitHub CLI
if ! gh auth status &> /dev/null; then
    print_error "Not authenticated with GitHub CLI!"
    print_status "Run: gh auth login"
    exit 1
fi

# Set git user if not set
if [[ -z "$(git config user.name)" ]]; then
    print_status "Setting git user..."
    git config user.name "GitLoader"
    git config user.email "gitloader@example.com"
fi

# Add all files to git
print_status "Adding files to git..."
git add .

# Check if there are changes to commit
if git diff --staged --quiet; then
    print_warning "No changes to commit"
else
    print_status "Committing changes..."
    git commit -m "Initial commit: $REPO_NAME"
    print_success "Changes committed"
fi

# Rename branch to main if needed
if [[ "$(git branch --show-current)" != "main" ]]; then
    print_status "Renaming branch to main..."
    git branch -M main
fi

# Create GitHub repository
print_status "Creating GitHub repository: $REPO_NAME"

# Build gh repo create command
GH_CMD="gh repo create $REPO_NAME"

if [[ "$IS_PRIVATE" == true ]]; then
    GH_CMD="$GH_CMD --private"
else
    GH_CMD="$GH_CMD --public"
fi

if [[ -n "$REPO_DESC" ]]; then
    GH_CMD="$GH_CMD --description \"$REPO_DESC\""
fi

GH_CMD="$GH_CMD --source=. --push"

# Execute the command
eval $GH_CMD

if [[ $? -eq 0 ]]; then
    print_success "Repository created and uploaded successfully!"
    print_success "Repository URL: https://github.com/$(gh api user --jq .login)/$REPO_NAME"
else
    print_error "Failed to create repository"
    exit 1
fi

# Add README if requested
if [[ "$ADD_README" == true ]]; then
    print_status "Adding README.md..."
    cat > README.md << EOF
# $REPO_NAME

$REPO_DESC

## Installation

\`\`\`bash
git clone https://github.com/\$(gh api user --jq .login)/$REPO_NAME.git
cd $REPO_NAME
\`\`\`

## Usage

Add your usage instructions here.

## License

This project is licensed under the MIT License.
EOF
    git add README.md
    git commit -m "Add README.md"
    git push
    print_success "README.md added"
fi

# Add License if requested
if [[ "$ADD_LICENSE" == true ]]; then
    print_status "Adding MIT License..."
    cat > LICENSE << EOF
MIT License

Copyright (c) $(date +%Y) $REPO_NAME

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF
    git add LICENSE
    git commit -m "Add MIT License"
    git push
    print_success "MIT License added"
fi

print_success "GITLOAD completed successfully!"
print_status "Your repository is now available at: https://github.com/$(gh api user --jq .login)/$REPO_NAME"
